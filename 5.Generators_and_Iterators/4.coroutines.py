import logging
from common import configure_logging

logger = configure_logging(level= logging.INFO)

def power(nums):
    for i in nums:
        yield i ** i
    
# for i in power(range(1,6)):
#     print(i)

# ‚úÖ 1. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–µ–ø–µ–Ω–µ–π (–∞–Ω–∞–ª–æ–≥ power)
# –ó–∞–¥–∞–Ω–∏–µ: –ù–∞–ø–∏—à–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –≤ —Å—Ç–µ–ø–µ–Ω–∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, [2, 3, 4] ‚Üí 2**0, 3**1, 4**2

def power(nums: list):
    for i in nums:
        yield i ** i

myList = [2, 3, 4]

# for i in power(myList):
#     print(i, end=" ")

def waiter():
    print("what would you like?")
    order = yield
    print(f"your order: {order}")

# w = waiter()
# next(w)
# w.send("Pasta") 

# for i in waiter():
#     print(i)


# for i in w:
#     print("gonna order salad")
#     w.send("salad")
#     print("Nice one, thank you for every one")

# ‚úÖ 2. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ yield
# –ó–∞–¥–∞–Ω–∏–µ: –°–æ–∑–¥–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "2 + 3" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π .send() –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
def calc():
    while True:
        task = yield
        try:
            result = eval(task)
            print(f"{task} = {result}")
        except Exception as e:
            print(f"Error in calculation: {e}")

# clc = calc()
# next(clc)  # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
# clc.send("2 + 3")     # –í—ã–≤–µ–¥–µ—Ç: 2 + 3 = 5
# clc.send("10 / 2")    # –í—ã–≤–µ–¥–µ—Ç: 10 / 2 = 5.0
# clc.send("5 * 5 + 1") # –í—ã–≤–µ–¥–µ—Ç: 5 * 5 + 1 = 26


# ‚úÖ 3. –î–∏–∞–ª–æ–≥–æ–≤—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫
# –ó–∞–¥–∞–Ω–∏–µ: –°–æ–∑–¥–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä: "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", "–ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?" ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥–∞—ë—Ç –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ .send()

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
# logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
# logger = logging.getLogger(__name__)\
logger = configure_logging(level= logging.INFO)

def chatbot():
    try:
        name = yield input("–ë–æ—Ç: –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ")
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {name}")

        age = yield input(f"–ë–æ—Ç: –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? ")
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç: {age}")

        job = yield input(f"–ë–æ—Ç: –û, —Ç–µ–±–µ {age}. –ê —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? ")
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞: {job}")

        logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: {name}, {age} –ª–µ—Ç, –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è: {job}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞: {e}")
        raise StopIteration("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")



# c = chatbot()
# next(c)
# c.send("")
# c.send("")
# c.send("")


# ‚úÖ 4. –ß–µ–∫-–ª–∏—Å—Ç –∑–∞–¥–∞—á
# –ó–∞–¥–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ö—Ä–∞–Ω–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á. –ü—Ä–∏ –∫–∞–∂–¥–æ–π .send() –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞. –ü—Ä–∏ .throw() ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫.

import logging

logging.basicConfig(level=logging.INFO, format="%(message)s")
logger = logging.getLogger(__name__)

# def checklist():
#     task = []
#     try:
#         while True:
#             ms = yield
#             task.append(ms)
#             logger.info(f"Append --> {ms}")
#     except Exception as e:
#         logger.info(f"Finished: {e}")
#         return task
    
# ch = checklist()
# next(ch)
# ch.send("First task")
# ch.send("Second task")

# try:
#     ch.throw(Exception("Calm down"))
# except StopIteration as e:
#     print("Finally checkList:", e.value)


def menu():
    orderList = []
    try:
        while True:
            order = yield
            orderList.append(order)
            logger.info(f"Ok, Do you want another food except {order}")
    except Exception as e:
        logger.info(f"Nice one, hold on 10 min")
        return orderList
    
# m = menu()
# next(m)
# m.send("Palay")
# m.send("Kola")

# try:
#     m.throw(Exception("That is all!"))
# except StopIteration as e:
#     print("Your orders are", e.value)

import logging

logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

def menu():
    order_list = []
    logger.info("üçΩ –ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ. –í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    try:
        while True:
            order = yield
            if not order:
                logger.warning("‚ùó –ü—É—Å—Ç–æ–π –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç")
                continue

            if order == "/done":
                logger.info("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")
                break

            if order == "/list":
                logger.info(f"üìã –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã: {order_list}")
                continue

            order_list.append(order)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {order}. –ß—Ç–æ-—Ç–æ –µ—â—ë?")
    except Exception as e:
        logger.info("üïí –ü—Ä–∏–Ω—è—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 –º–∏–Ω—É—Ç.")
    return order_list

# m = menu()
# next(m)
# m.send("Palay")
# m.send("Kola")
# m.send("/list")     # –í—ã–≤–µ–¥–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
# m.send("/done")     # –ó–∞–≤–µ—Ä—à–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä

# –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
# try:
#     next(m)
# except StopIteration as e:
#     print("Your orders are:", e.value)





# try:
#     g.throw(Exception("–•–≤–∞—Ç–∏—Ç!"))
# except StopIteration as e:
#     print("–†–µ–∑—É–ª—å—Ç–∞—Ç:", e.value)  # —Ç—É—Ç –±—É–¥—É—Ç ["A", "B", "C"]



# ‚úÖ 6. –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Å—á–µ—Ç—á–∏–∫ –æ–ø—ã—Ç–∞

# def counter():
#     count = 0
#     try:
#         while count <= 100:
#             ex = yield int
#             count += ex
#             if count >= 100:
#                 logger.info(f"experience enough ({count} XP)")
#                 # return count
#             else:
#                 ex = int(input(f"Not enough {100 - count} enter over {100 - count}: "))
#                 logger.info(f"experience enough ({count} XP)")
#     except Exception as e:
#         logger.info(f"Finished: {e}")
#         return count

import logging

logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

def counter():
    count = 0
    try:
        while count < 100:
            xp = yield
            if not isinstance(xp, (int, float)):
                logger.warning("‚õî XP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                continue
            count += xp
            logger.info(f"üî• –ü–æ–ª—É—á–µ–Ω–æ {xp} XP ‚Äî –≤—Å–µ–≥–æ {count}")
        logger.info(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –í—Å–µ–≥–æ XP: {count}")
    except Exception as e:
        logger.info(f"üí§ –ü—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {e}")
    return count

    
# c = counter()
# next(c)
# c.send(10)
# c.send(40)
# c.send(50)

# try:
#     c.throw(Exception("Done!"))
# except StopIteration as e:
#     print("üéñ –§–∏–Ω–∞–ª—å–Ω—ã–π XP:", e.value)

def even_filter(target):
    try:
        while True:
            value = yield
            if value is None:
                break
            if value % 2 == 0:
                target.send(value)
    except Exception as e:
        target.throw(e)


def square(target):
    try:
        while True:
            value = yield
            if value is None:
                break
            target.send(value ** 2)
    except Exception as e:
        target.throw(e)


def summator():
    total = 0
    try:
        while True:
            value = yield
            if value is None:
                yield total  # –º—è–≥–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç
                break
            total += value
    except Exception as e:
        print(f"Summator stopped: {e}")





s = summator()
next(s)

sq = square(s)
next(sq)

f = even_filter(sq)
next(f)

f.send(2)
f.send(3)
f.send(4)

try:
    f.send(None)
except StopIteration as e:
    print("‚úÖ –°—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª:", e.value)  # 4 + 16 = 20




# try:
#     f.send(None)
# except StopIteration as e:
#     print("‚úÖ –°—É–º–º–∞:", e.value)  # –æ–∂–∏–¥–∞–µ–º: 2 –∏ 4 ‚Üí 4 + 16 = 20










def waiter():
    order_items = []
    print("What would U like?")
    while True:
        order = yield order_items
        if order is None:
            print("done", order_items)
            return order_items
        order_items.append(order)
        print(order, "ok, what else")

# w = waiter()
i_want_to_order = [
    "fruit salad",
    "palay",
    "kola"
]
# next(w)

# for food in i_want_to_order:
#     w.send(food)

# next(w)

class OrderCoplete(Exception):
    pass

def waiter():
    order_items = []
    print("What would U like?")
    while True:
        
        try:
            order = yield order_items
        except:
            print("done", order_items)
            return order_items
        

        if order is not None:
            order_items.append(order)
            print(order, "ok, what else")


# w = waiter()

# for food, already_order in zip(i_want_to_order, w):
#     print("already_order", already_order)
#     w.send(food)
    

# for i in range(5):
#     print(next(w))
# w.throw(OrderCoplete)


def power(num):
    p = 0
    while True:
        p = yield num ** p
        

# p = power(2)
# next(p)
# # print(p.send(3))

# for i in range(5):
#     print(i, p.send(i))
# p.close()
# for i in range(5):
#     print(i, p.send(i))

# def items_by_one(seq):
#     yield from seq

# for i in items_by_one(range(4)):
#     print(i)

def add_count():
    counter = 0
    while True:
        num = yield 
        if num is None:
            return counter
        counter += num
        print(f"counter inc by {num} now = {counter}")

def collect_counters(counters: list):
    while True:
        counter = yield from add_count()
        counters.append(counter)

numbers = []
collector = collect_counters(numbers)
# print(numbers)
# next(collector)
# collector.send(4)
# collector.send(5)
# # collector.send(None)
# print(numbers)
# collector.send(11)
# print(numbers)

