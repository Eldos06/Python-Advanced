
# num = int(input("~~> "))
# n = (i for i in range(num) if i % 2 == 0)

# def even_numbers(g):
#     for i in n:
#         print(i)


# even_numbers(n)


#        13   ‚Üí 1 + 3 = 4  
#        205  ‚Üí 2 + 0 + 5 = 7  
#        7    ‚Üí 7
# nums = [13, 205, 7]

# def digits_sum_gen(nums: list[int]):
#     for number in nums:
#         yield sum(int(digit) for digit in str(number))

# g = digits_sum_gen([13, 205, 7])

# for i in g:
#     print(i)

# s = (i for i in range(num) if i % 7 == 0)

# def seven(n):
#     for i in n:
#         print(i**2)


# seven(s)


# def char_gen(s: str):
#     for char in s:
#         if char.isalpha():  # –ø—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –±—É–∫–≤–∞?
#             yield char


# text = "He11o, w0rld!üî•"

# for c in char_gen(text):
#     print(c)

# ‚öôÔ∏è –£–†–û–í–ï–ù–¨ 2 ‚Äî –Ω–æ—Ä–º –ø–æ-–ø–∞—Ü–∞–Ω—Å–∫–∏









# üß† –£–†–û–í–ï–ù–¨ 3 ‚Äî "–ß–æ –∑–∞ —Ö—Ä–µ–Ω—å?" (–ø—Ä–æ–∫–∞—á–∫–∞)


# –°–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ —Å–ø–∏—Å–∫—É –≤—Ä–æ–¥–µ [[1,2], [3], [4,5]] –±—É–¥–µ—Ç –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –≤—Å—ë –ø–ª–æ—Å–∫–æ –æ—Ç–¥–∞–≤–∞—Ç—å.

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ state reset: –ø–æ—Å–ª–µ 5 –≤—ã–∑–æ–≤–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å "RESET", –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ —á–∏—Å–ª–∞ —Å 0.

# –ù–∞–ø–∏—à–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ N —Ä–∞–∑.

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä window_gen(seq, size) ‚Äî —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: window_gen([1,2,3,4], 2) ‚Üí (1,2) (2,3) (3,4)

# üëë –£–†–û–í–ï–ù–¨ 4 ‚Äî —á—Ç–æ–±—ã —Ç—ã –æ—Ö—Ä–µ–Ω–µ–ª
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å yield from ‚Äî —Å–¥–µ–ª–∞–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ —Å–ø–∏—Å–∫—É —Å–ø–∏—Å–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç yield from –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è.

# –°–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä repeat_until(predicate, gen), –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–¥–∞—ë—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞ predicate(x) == False.

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å try/except –≤–Ω—É—Ç—Ä–∏: –∫–∏–¥–∞–π ValueError –ø—Ä–∏ x < 0, –∏–Ω–∞—á–µ yield x * 2.

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ map + filter –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî –∑–∞–º–µ–Ω–∏ –≤—Å–µ –±—É–∫–≤—ã –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –¥–ª–∏–Ω–æ–π > 3.

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä-–º–∏–∫—Å–µ—Ä: –ø–æ–ª—É—á–∞–µ—Ç 2 –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —á–µ—Ä–µ–¥—É–µ—Ç –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è: (a1, b1, a2, b2, ...).


# def infinite_zeros():
#     yield 0
#     # return 0

# g = infinite_zeros()
# while True:
#     print(g)


# start, end = list(map(int, input("~> ").split(" ")))


# def square(start, end):
#     for i in range(start, end+1):
#         yield i ** 2


# for x in square(start, end):
#     print(x)

# 0 1 1 2 3 5 8 ....
# n = int(input("~~> "))

# def fib(a):
#     if a <= 1:
#         yield a
#     else:
#         yield fib(a - 1) + fib(a - 2)

# for i in fib(n):
#     print(i)
# num = int(input())

# def even(n):
#     for i in range(n + 1):
#         if i % 2==0:
#             yield i

# print(list(even(num)))

# def even_only(n):
#     for i in range(n + 1):
#         if i % 2 == 0:
#             yield i

# # —Ç–µ—Å—Ç
# print(list(even_only(20)))

# def zero():
#     return 0

# while True:
#     print(zero())


# n = int(input('~~> '))
# def fib_n(n: int):
#     a, b = 0, 1
#     for i in range(n):
#         yield a
#         a, b = b, a + b

# for i in fib_n(n):
#     print(i)




# import re

# def palindromes_only(text):
#     words = re.findall(r'\b\w+\b', text.lower())  # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞
#     for word in words:
#         if word == word[::-1] and len(word) > 1:
#             yield word

# # —Ç–µ—Å—Ç
# for w in palindromes_only("–®–∞–ª–∞—à –∫–∞–∑–∞–∫ –Ω–µ –µ–ª. –ü–æ—Ç–æ–ø –±—ã–ª. –ù–æ –º–∞–º–∞ ‚Äî –Ω–µ—Ç!"):
#     print(w)


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ–ª–∏—Ç–µ–ª–µ–π: get_divisors(n) ‚Üí –≤—ã–¥–∞—ë—Ç –≤—Å–µ –¥–µ–ª–∏—Ç–µ–ª–∏ —á–∏—Å–ª–∞ n.
# def get_divisors(n):
#     for i in range(2, n//2):
#         if n % i == 0:
#             yield i
#             i += 1
        
        
# for i in get_divisors(10):
#     print(i)

# num = int(input("~> "))

# get_divisors = (i for i in range(1,num+1) if num % i == 0)

# for i in get_divisors:
#     print(i)
   

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä (i, i¬≤) –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ n.

# def myfunc(num):
#     for i in range(num+1):

#         yield i, i**2

# for i in myfunc(11):
#     print(i)


# def myfunc(a: list):
#     for i in range(1, len(a)):
#         if a[i] > a[i - 1]:
#             yield a[i]

# a = [1, 3, 2, 5, 4, 6]

# for i in myfunc(a):
#     print(i)

# –ù–∞–ø–∏—à–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä prime_gen() ‚Äî –≤—ã–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ.
n = 1
def prime_gen(n):
    while True:
        yield n**n + n + 41
        print()
        n += 1

for i in prime_gen(n):
    print(i)



